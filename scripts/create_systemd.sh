#!/usr/bin/env bash
set -euo pipefail

# ===== User-configurable paths =====
USER_NAME="${USER}"                                # e.g. rpi
HOME_DIR="${HOME}"
REPO_DIR="${HOME_DIR}/gits/LeanFrame"              # your repo
VENV_BIN="${REPO_DIR}/.venv/bin"                   # existing venv bin
PHOTO_DIR="${HOME_DIR}/DrivePhotos"                # local photo cache (for sync)
RCLONE_REMOTE="gdrive"                             # rclone remote name
DRIVE_PATH=""                             # Drive folder name OR ID (keep quotes for ID)

# Pairing backend config
BACKEND_DIR="${REPO_DIR}/pairing_backend"
BACKEND_ENV_FILE="${BACKEND_DIR}/.env"            # will be parsed for REMOTE_* values
SECRETS_FILE="/etc/leanframe.secrets"             # root-only file to hold sensitive vars

# ===== Sanity checks =====
[[ -d "${REPO_DIR}" ]] || { echo "ERROR: Repo not found at ${REPO_DIR}"; exit 1; }
[[ -x "${VENV_BIN}/python" ]] || {
  echo "ERROR: venv missing at ${VENV_BIN}. Create it then install requirements."
  echo "       python3 -m venv ${REPO_DIR}/.venv && source ${REPO_DIR}/.venv/bin/activate && pip install -r ${REPO_DIR}/requirements.txt"
  exit 1
}

RCLONE_CLIENT_ID=""
RCLONE_CLIENT_SECRET=""

if [[ -f "${BACKEND_ENV_FILE}" ]]; then
  # Robust .env parser for simple KEY=VALUE lines (handles quotes, ignores comments/blank lines)
  parse_env () {
    local key="$1"
    # get last occurrence if multiple
    local line
    line="$(grep -E "^[[:space:]]*${key}[[:space:]]*=" "${BACKEND_ENV_FILE}" | tail -n1 || true)"
    [[ -n "${line}" ]] || { echo ""; return 0; }
    # strip leading "KEY=" and surrounding quotes/spaces
    line="${line#*=}"
    line="${line#"${line%%[![:space:]]*}"}"          # ltrim space
    line="${line%${line##*[![:space:]]}}"            # rtrim space
    line="${line%\"}"; line="${line#\"}"             # strip double quotes if present
    line="${line%\'}"; line="${line#\'}"             # strip single quotes if present
    echo "$line"
  }

  RCLONE_CLIENT_ID="$(parse_env GOOGLE_CLIENT_ID)"
  RCLONE_CLIENT_SECRET="$(parse_env GOOGLE_CLIENT_SECRET)"
fi

# ===== Ensure photo dir and global env exist =====
mkdir -p "${PHOTO_DIR}"
sudo tee /etc/leanframe.env >/dev/null <<EOF
PHOTO_DIR=${PHOTO_DIR}
RCLONE_REMOTE=${RCLONE_REMOTE}
DRIVE_PATH="${DRIVE_PATH}"
RCLONE_CLIENT_ID="${RCLONE_CLIENT_ID}"
RCLONE_CLIENT_SECRET="${RCLONE_CLIENT_SECRET}"
EOF

# Write to a root-only secrets file so services can read them via EnvironmentFile=
sudo tee "${SECRETS_FILE}" >/dev/null <<EOF
# Generated by create_systemd.sh â€” do NOT commit this file.
RCLONE_CLIENT_ID=${RCLONE_CLIENT_ID}
RCLONE_CLIENT_SECRET=${RCLONE_CLIENT_SECRET}
EOF
sudo chmod 600 "${SECRETS_FILE}"


# ===== Create user units (~/.config/systemd/user) =====
USER_UNIT_DIR="${HOME_DIR}/.config/systemd/user"
mkdir -p "${USER_UNIT_DIR}"

# leanframe.service (Wayland user service with socket wait)
cat > "${USER_UNIT_DIR}/leanframe.service" <<EOF
[Unit]
Description=LeanFrame (Wayland user service; waits for compositor)
Wants=graphical-session.target
After=graphical-session.target

[Service]
Type=simple
WorkingDirectory=/home/rpi/gits/LeanFrame
EnvironmentFile=/etc/leanframe.env
Environment=PYTHONUNBUFFERED=1
Environment=SDL_VIDEODRIVER=wayland
# Wait up to ~15s for Wayland socket to avoid race at login
ExecStartPre=/bin/sh -lc 'for i in \$(seq 1 15); do [ -S "\$XDG_RUNTIME_DIR/wayland-0" ] && exit 0; sleep 1; done; echo "wayland-0 not ready"; exit 1'
ExecStart=${VENV_BIN}/python -m photoframe
Restart=always
RestartSec=2

[Install]
WantedBy=default.target
EOF

# Patch username in the unit paths
sed -i "s|/home/rpi|${HOME_DIR}|g" "${USER_UNIT_DIR}/leanframe.service"

# Path unit to start LeanFrame when Wayland socket appears
cat > "${USER_UNIT_DIR}/leanframe-wayland.path" <<EOF
[Unit]
Description=Start LeanFrame when Wayland socket appears

[Path]
PathExists=%t/wayland-0
Unit=leanframe.service

[Install]
WantedBy=default.target
EOF

# Boot switch: choose setup vs normal
sudo tee /etc/systemd/system/leanframe-switch.service >/dev/null <<'EOF'
[Unit]
Description=LeanFrame boot switch (setup vs normal)
After=network.target

[Service]
Type=oneshot
ExecStart=/bin/bash -lc '\
  STATE="/var/lib/leanframe/state.json"; \
  if [ -f "$STATE" ] && grep -q "\"provisioned\": true" "$STATE"; then \
    # Provisioned: stop setup, enable & start user wayland path (which starts leanframe.service). \
    systemctl stop leanframe-setup.service || true; \
    systemctl disable leanframe-setup.service || true; \
    loginctl enable-linger "${USER}"; \
    runuser -l "${USER}" -c "systemctl --user daemon-reload"; \
    runuser -l "${USER}" -c "systemctl --user enable leanframe-wayland.path"; \
    runuser -l "${USER}" -c "systemctl --user start  leanframe-wayland.path"; \
  else \
    # Not provisioned: disable user units and start setup. \
    runuser -l "${USER}" -c "systemctl --user stop  leanframe-wayland.path" || true; \
    runuser -l "${USER}" -c "systemctl --user disable leanframe-wayland.path" || true; \
    systemctl enable leanframe-setup.service; \
    systemctl start  leanframe-setup.service; \
  fi'
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

# leanframe-sync.service (system service for rclone sync)
sudo tee /etc/systemd/system/leanframe-sync.service >/dev/null <<EOF
[Unit]
Description=LeanFrame: rclone sync Drive -> local photo cache
Wants=network-online.target
After=network-online.target

[Service]
User=${USER_NAME}
EnvironmentFile=/etc/leanframe.env
EnvironmentFile=${SECRETS_FILE}
ExecStartPre=/usr/bin/mkdir -p "\${PHOTO_DIR}"
# If you decide to use RCLONE_CLIENT_ID/SECRET with rclone, add: --client-id and --client-secret
ExecStart=/usr/bin/rclone sync "\${RCLONE_REMOTE}:\${DRIVE_PATH}" "\${PHOTO_DIR}" \\
  --fast-list --transfers 4 --checkers 8 --create-empty-src-dirs=false

EOF

# Timer
sudo tee /etc/systemd/system/leanframe-sync.timer >/dev/null <<EOF
[Unit]
Description=Run LeanFrame sync periodically (10 mins)

[Timer]
OnBootSec=2min
OnUnitActiveSec=10min
Unit=leanframe-sync.service

[Install]
WantedBy=timers.target
EOF

cat > "${USER_UNIT_DIR}/leanframe-onboarding.service" <<'EOF'
[Unit]
Description=LeanFrame onboarding QR (user session)
Wants=graphical-session.target
After=graphical-session.target

[Service]
Type=simple
WorkingDirectory=%h/gits/LeanFrame
Environment=PYTHONUNBUFFERED=1
Environment=SDL_VIDEODRIVER=wayland
# Wait for the compositor's socket so the window can open
ExecStartPre=/bin/sh -lc 'for i in $(seq 1 20); do [ -S "$XDG_RUNTIME_DIR/wayland-0" ] && exit 0; sleep 1; done; echo "wayland-0 not ready"; exit 1'
ExecStart=%h/gits/LeanFrame/.venv/bin/python -m photoframe.onboarding
Restart=no

[Install]
WantedBy=default.target
EOF


# ===== Allow $USER_NAME to restart the switcher without password (sudoers drop-in) =====
# This enables the FastAPI /provision endpoint to run:
#   sudo systemctl restart leanframe-switch.service
# so the device flips from setup mode to runtime immediately (no reboot).
SUDOERS_DROPIN="/etc/sudoers.d/leanframe-switch"
sudo tee "${SUDOERS_DROPIN}" >/dev/null <<EOF
# LeanFrame: allow ${USER_NAME} to flip services after QR provisioning
# Only these exact commands are allowed, nothing else:
${USER_NAME} ALL=(ALL) NOPASSWD: /bin/systemctl restart leanframe-switch.service, /usr/bin/systemctl restart leanframe-switch.service
EOF
sudo chmod 440 "${SUDOERS_DROPIN}"
# Validate syntax; if invalid, visudo returns non-zero and the script (set -e) will exit.
sudo visudo -cf "${SUDOERS_DROPIN}"
echo "Created sudoers drop-in at ${SUDOERS_DROPIN} (validated)."

# ===== Make the user manager survive boot (do once) =====
sudo loginctl enable-linger "${USER_NAME}"

# ===== Disable and remove any old system service  =====
if systemctl list-unit-files | grep -q '^leanframe.service'; then
  sudo systemctl disable --now leanframe.service || true
  sudo rm -f /etc/systemd/system/leanframe.service || true
  sudo systemctl daemon-reload || true
fi

# ===== Enable & start user units =====
systemctl --user daemon-reload
# NOT enabling user leanframe units now; the switcher will do it post-provision.
sudo systemctl daemon-reload
# systemctl --user enable --now leanframe.service
# systemctl --user enable --now leanframe-wayland.path
systemctl --user enable --now leanframe-onboarding.service
# sudo systemctl enable --now leanframe-setup.service || true
sudo systemctl enable --now leanframe-switch.service
sudo systemctl enable --now leanframe-sync.timer
# Warm sync (non-fatal if it fails; check logs with journalctl -u leanframe-sync)
sudo systemctl start leanframe-sync.service || true



echo "-------------------------------------------------------------"
echo "User units (created but not enabled yet):"
echo "  ${USER_UNIT_DIR}/leanframe.service"
echo "  ${USER_UNIT_DIR}/leanframe-wayland.path"
echo "System units:"
# echo "  /etc/systemd/system/leanframe-setup.service"
echo "  /etc/systemd/system/leanframe-switch.service"
echo "  /etc/systemd/system/leanframe-sync.service"
echo "  /etc/systemd/system/leanframe-sync.timer"
echo
echo "Boot switch status:"
echo "  sudo systemctl status leanframe-switch.service"
echo
echo "First boot (not provisioned): setup service runs."
echo "After provisioning (provisioned=true):"
echo "  switcher stops setup and enables user leanframe-wayland.path -> leanframe.service"
echo "-------------------------------------------------------------"